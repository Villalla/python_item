#最长公共子串
import random
import string
import time
import matplotlib.pyplot as plt
def LCSIter(str1, str2):
    # 记录算法开始时间
    start_time = time.time()

    m = len(str1)
    n = len(str2)

    # 创建二维表格，并初始化为0
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    max_len = 0  # 最长公共子串的长度
    end_index = 0  # 最长公共子串的结束索引

    # 填充二维表格
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
                if dp[i][j] > max_len:
                    max_len = dp[i][j]
                    end_index = i - 1
            else:
                dp[i][j] = 0

    # 根据填充好的表格回溯得到最长公共子串
    start_index = end_index - max_len + 1
    longest_common_substring = str1[start_index:end_index + 1]
    # 记录算法结束时间
    end_time = time.time()

    # 计算算法耗时,单位ns
    elapsed_time_nanoseconds = (end_time - start_time)

    return longest_common_substring,elapsed_time_nanoseconds

# 生成两个长度固定的二进制整数的函数
def generate_str_pair(length):
    if length <= 0:
        print("输入错误，请输入有效正整数：")
        return None

    # 生成随机小写字母的串
    str1 = ''.join(random.choice((string.ascii_lowercase)) for _ in range(length))
    str2 = ''.join(random.choice((string.ascii_lowercase)) for _ in range(length))

    print(f"生成长度为 {length} 的随机整数: {str1} 和 {str2}")
    return str1, str2

# 测试算法在不同输入规模下的性能
input_lengths = [10, 40,45 ,55,70,100,159,250,289,300, 350,390,450,560,576,600,678,711,876,999]  # 输入规模列表
time_taken_list = []  # 用于存储每次测试所用时间的列表

for length in input_lengths:
    str_pair = generate_str_pair(length)
    str1 = str_pair[0]
    str2 = str_pair[1]
    time_taken = LCSIter(str1, str2)[1]
    time_taken_list.append(time_taken)

# 绘制二维坐标图
plt.plot(input_lengths, time_taken_list, marker='o')
plt.title('驶入规模与时间关系图')
plt.xlabel('输入规模')
plt.ylabel('平均时间 (ns)')
plt.grid(True)
plt.show()
#
# # test
# length = int(input("请输入需要生成的整数对的长度："))
# str_pair = generate_str_pair(length)
# str1=str_pair[0]
# str2=str_pair[1]
# # str1 = "aaaaaaaabaaaacdefg"
# # str2 = "baaaaaaaaaaacdefgh"
#
# lcstring=LCSIter(str1, str2)[0]
# print("最长公共子串:", lcstring)
# time_taken = LCSIter(str1, str2)[1]
# print("算法用时（ns)：", time_taken)
